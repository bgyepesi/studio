import os
import requests

from bs4 import BeautifulSoup


class Lab(object):
    """ This class deals with the AIP Lab API.

          API_URL = 'https://lab.aip.com'
    """

    def __init__(self, API_key):
        self.lab = None
        self.API_key = API_key
        self.base_url = 'https://lab.aip.com'

        # Define the headers of the lab api requests
        self.headers = {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                        'Connection': 'keep-alive',
                        'Authorization': 'Token {0}'.format(self.API_key)}

        # Check if the user API key is valid for authentication
        if not self.auth():
            raise Exception("Your lab api key `{}`is not valid".format(self.API_key))

        # Create a request session that can be used for any request
        self.session = requests.Session()

    @staticmethod
    def _process_dataset_snapshot_query(csrf_token, name, tag_query, ontology_id, description, sampling_percent, only_manifest,
                                        min_images, exclude_snapshot, include_empty_folders):
        """
        Return Lab API's query to request the creation of a Dataset snapshot.
        Args:
            csrf_token: (string) Token generated by the Lab for the HTML loaded form
            name: (string) Name of the snapshot that will be created in the dataset
            tag_query: (string) Tag query of the snapshot
            ontology_id: (a string containing an integer) Lab's ontology identifier
            description: (string) Description of the snapshot
            dictionary_queries: (string) The custom dictionary i.e. the folder splitting string
            fixed_sample_per_group: (integer) Maximum number of images per class
            percent_sample_per_group: (integer) Percentage of samples per class
            only_manifest: (boolean) Boolean to indicate if only the manifest should be created
            include_empty_folders: (boolean) Boolean to indicate if empty class folders should be created
            threshold: (integer) Threshold below which classes with fewer images are omitted
            exclude_snapshots: (string) Determine if specific snapshots should be excluded
            excluded_snapshot_ids: (string containing a list) List of the snapshot ids to be exluded from the snapshot
        """
        parameters = {'csrf-token': csrf_token,
                      'dataset_snapshot[name]': name,
                      'dataset_snapshot[tag_query]': tag_query,
                      'dataset_snapshot[ontology_id]': ontology_id,
                      'dataset_snapshot[description]': description,
                      'dataset_snapshot[dictionary_queries]': '',
                      'dataset_snapshot[fixed_sample_per_group]': '',
                      'dataset_snapshot[percent_sample_per_group]': str(sampling_percent),
                      'dataset_snapshot[only_manifest]': str(int(only_manifest)),
                      'dataset_snapshot[include_empty_folders]': str(int(include_empty_folders)),
                      'dataset_snapshot[threshold]': str(min_images),
                      'exclude_snapshots': 'yes',
                      'dataset_snapshot[excluded_snapshot_ids][]': exclude_snapshot,
                      'commit': 'Submit'
                      }
        return parameters

    def auth(self):
        """ Return True is self.API_key is correct. Otherwise, return False.
            The function pings the Lab to get a page requiring the valid lab API key. If the get requested is denied,
            the Lab API key is wrong
        """
        url_auth_datasets = '{}/datasets'.format(self.base_url)
        response = requests.get(url_auth_datasets, headers=self.headers)
        if "login.aip.com" not in response.text:
            return True
        return False

    def dataset_name_exists(self, dataset_name):
        """ Return True if `dataset_name` Dataset exists in the Lab. Otherwise, return False.
            The function pings the Lab to get the page of the dataset. If the `get` query has a `404` code,
            then the dataset does not exist.
        """
        url_dataset = '{}/datasets/{}'.format(self.base_url, dataset_name)
        response = requests.get(url_dataset, headers=self.headers)

        # Check the HTTP status of the query
        if response.status_code == 404:
            return False
        return True

    def dataset_snapshot_exists(self, snapshot_name, dataset_name):
        """ Return True if `snapshot_name` snapshot exists in the `dataset_name` Dataset. Otherwise, return False.
            The function pings the Lab to get the page of the snapshot in a specified Dataset. If the `get` query has a `404` code,
            then the snapshot does not exist in the Dataset.
        """
        url_snapshot = '{}/datasets/{}/snapshots/{}'.format(self.base_url, dataset_name, snapshot_name)
        response = requests.get(url_snapshot, headers=self.headers)

        # Check the HTTP status of the query
        if response.status_code == 404:
            return False
        return True

    def create_dataset_snapshot(self, dataset, snapshot, tag_query, ontology_id="", description="", sampling_percent="", only_manifest=True,
                                min_images="", exclude_snapshot="", include_empty_folders=False):
        """
        Creates a dataset snapshot in the Lab through its API.
        Args:
            dataset: (string) Name of the Lab's dataset in which the snapshot will be created
            snapshot: (string) Name of the snapshot that should be created in the the dataset
            tag_query: (string) Tag query of the snapshot
            ontology_id: (a string containing an integer) Lab's ontology identifier
            description: (string) Description of the snapshot
            sampling_percent: (integer) Percentage of samples per class
            only_manifest: (boolean) Boolean to indicate if only the manifest should be created
            min_images: (integer) Threshold below which classes with fewer images are omitted
            exclude_snapshots: (string) Determine if specific snapshots should be excluded
            include_empty_folders: (boolean) Boolean to indicate if empty class folders should be created
        Returns:
            response: Lab API response
        """
        # Define URLs
        url_snapshot_list = '{}/datasets/{}/snapshots'.format(
            self.base_url, dataset)
        url_new_snapshot = url_snapshot_list + "/new"

        # Create a snapshot only when the dataset exists and the snapshot does not exist
        if self.dataset_name_exists(dataset) and not self.dataset_snapshot_exists(snapshot, dataset):
            # Get a new snapshot form with its own CSRF token
            response = requests.get(url_new_snapshot, headers=self.headers)

            html_head = BeautifulSoup(
                response.text, 'html.parser').find('head')

            csrf_token = html_head.find(
                'meta', {'name': 'csrf-token'})['content']

            # Preprocess the post request parameters
            parameters = self._process_dataset_snapshot_query(csrf_token, snapshot, tag_query, ontology_id, description, sampling_percent, only_manifest,
                                                              min_images, exclude_snapshot, include_empty_folders)

            # Run the post request
            response = self.session.post(
                url_snapshot_list, headers=self.headers, data=parameters)

        # Raise an error if:
        # - Case 1: both the dataset and the snapshot exist
        # - Case 2: the dataset does not exist
        # - Case 3: both the dataset and the snapshot don't exist
        # The case 3 will be handeled automatically by the case 2
        elif self.dataset_name_exists(dataset) and self.dataset_snapshot_exists(snapshot, dataset):
            raise Exception("The snapshot `{}` already exists in the dataset `{}`".format(snapshot, dataset))
        else:
            raise Exception("The dataset `{}` doesn't exist".format(dataset))

    def download_snapshot_manifest(self, snapshot_name, dataset_name, save_dir):
        """ Download the manifest of the snapshot `snapshot_name` if the snapshot exists in the `dataset_name` Dataset and returns True. Otherwise, return False.
            The function pings the Lab to download the manifest of the snapshot in a specified Dataset. If the `get` query has a `404` code,
            then the snapshot does not exist in the Dataset.
        """
        url_snapshot_manifest = '{}/datasets/{}/snapshots/{}/manifest'.format(self.base_url, dataset_name, snapshot_name)
        response = requests.get(url_snapshot_manifest, headers=self.headers)
        # Check the HTTP status of the query
        if response.status_code == 404:
            return False
        # Download the snapshot manifest
        manifest_name = "manifest_{}.json".format(snapshot_name)
        manifest_path = os.path.join(save_dir, manifest_name)
        open(manifest_path, 'wb').write(response.content)
        return True

#       # Request a Lab Dataset Snapshot job based on `snapshot_config`
#       snapshot_config = {'dataset': dataset,
#                          'name': name,
#                          'ontology': ontology,
#                          'taq_query': taq_query,
#                          'description': description,
#                          'sampling_percent': sampling_percent,
#                          'min_images': min_images,
#                          'exclude_snapshot': exclude_snapshot
#                          }
#       return snapshot_id
#
    def ontology_exists(self, ontology_name):
        """ Return True if `ontology_name` Ontology exists in the Lab. Otherwise, return False.
            The function pings the Lab to get the page of the ontology. If the `get` query has a `404` code,
            then the ontology does not exist.
        """
        url_ontology = '{}/ontology/{}'.format(self.base_url, ontology_name)
        response = requests.get(url_ontology, headers=self.headers)

        # Check the HTTP status of the query
        if response.status_code == 404:
            return False
        return True

    def image_exists(self, dataset, image_id):
        """ Return True if an image with `image_id` exists in the `dataset` dataset. Otherwise, return False.
            The function pings the Lab to get the page of image. If the `get` query has a `404` code,
            then the image does not exist.
        """
        # Check if the dataset exists
        if not self.dataset_name_exists(dataset):
            raise Exception('The dataset `{}` in which the image with id `{}` is expected to be in does not exist'.format(dataset, image_id))

        url_image = '{}/datasets/{}/images/{}'.format(self.base_url, dataset, image_id)
        response = requests.get(url_image, headers=self.headers)

        # Check the HTTP status of the query
        if response.status_code == 404:
            return False
        return True
